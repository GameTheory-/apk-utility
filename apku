#!/bin/bash

# ===== Variables
PROJECT_NAME="Apk Utility"
VERSION="$PROJECT_NAME v2.4"
DESCRIPTION="An APK & JAR Manipulation Utility"

BASE=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

INPUT_DIR=$BASE/input
OUTPUT_DIR=$BASE/output
TOOLS_DIR=$BASE/tools
TAG_LIST=$TOOLS_DIR/tag_list
WORK_DIR=$TOOLS_DIR/work_temp
DECOMPILED_DIR=$BASE/decompiled
APKTOOL=$TOOLS_DIR/apktool
ZIPALIGN=$TOOLS_DIR/zipalign
FRAMEWORKS_DIR=$TOOLS_DIR/frameworks
ZIPALIGN_DIR=$BASE/zipalign
SIGN_JAR=$TOOLS_DIR/sign.jar
APKTOOL_JAR=$TOOLS_DIR/apktool.jar
TOOL_7ZA=$TOOLS_DIR/7za
THIS_SCRIPT=$BASE/$(basename $0)

DESKTOP_SHORTCUT=/home/$(whoami)/.local/share/applications/apk-utility.desktop
ICON=$TOOLS_DIR/icon.png

UPDATE_URL="https://techstop.github.io/apk-utility/"
REPO_URL="https://github.com/GameTheory-/apk-utility"

# ===== ANSI color code variables
BOLD="\e[1m"
CYAN="\e[96m"
BLUEBG="\e[104m"
GREEN="\e[0;32m"
HRED="\e[0;91m"
WHITE="\e[97m"
NC="\e[0m"
EXPND="\e[K"

# ===== make sure files have exec perms
if [[ ! -x "$APKTOOL" ]]; then
	chmod +x "$APKTOOL"
fi
if [[ ! -x "$ZIPALIGN" ]]; then
	chmod +x "$ZIPALIGN"
fi
if [[ ! -x "$APKTOOL_JAR" ]]; then
	chmod +x "$APKTOOL_JAR"
fi
if [[ ! -x "$SIGN_JAR" ]]; then
	chmod +x "$SIGN_JAR"
fi
if [[ ! -x "$TOOL_7ZA" ]]; then
	chmod +x "$TOOL_7ZA"
fi

# ===== for centering strings
ECHO_CENTER() {
	printf "%*s\n" $((( ${#1} + $(tput cols) ) / 2)) "$1"
}

# ===== ECHO_CENTER variables go here
NAME_TXT=$(ECHO_CENTER "$PROJECT_NAME")

# ===== continue
PRESS_ENTER() {
	echo ""
	echo -n -e "	${GREEN}Press Enter to continue${NC} "
	read
	clear
}

# ===== incorrect selection
INCORRECT_SELECTION() {
	echo -e "${HRED}Incorrect selection! Try again.${NC}"
}

# =====  Create temp folder for zipaligning
WorkDir() {
	if [ ! -d "$WORK_DIR" ]; then
		mkdir "$WORK_DIR"
	fi
}

# =====  Create frameworks dir
FrameWorkDir() {
	if [ ! -d "$FRAMEWORKS_DIR" ]; then
		mkdir "$FRAMEWORKS_DIR"
	fi
}

# =====  Create decompiled dir
DecompiledDir() {
	if [ ! -d "$DECOMPILED_DIR" ]; then
		mkdir "$DECOMPILED_DIR"
	fi
}

# =====  Create output dir
OutputDir() {
	if [ ! -d "$OUTPUT_DIR" ]; then
		mkdir "$OUTPUT_DIR"
	fi
}

# ===== Decompile apk
Decomp() {
	if ls "$INPUT_DIR"/*.apk > /dev/null 2>&1 || ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
		DecompiledDir
		cd "$INPUT_DIR"
		echo -e "${GREEN}Make selection to decompile.${NC}"
		PROMPT="
Enter selection:"
		if ! ls "$INPUT_DIR"/*.apk > /dev/null 2>&1; then
			OPTIONS=( *.jar )
		elif ! ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
			OPTIONS=( *.apk )
		else
			OPTIONS=( *.apk *.jar )
		fi
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				"$APKTOOL" d -f $OPT -p "$FRAMEWORKS_DIR" -o "$DECOMPILED_DIR"/${OPT%.*}
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid apk or jar files in the input folder.${NC}"
	fi
}

# ===== Decompile apk without dex(smali)
DecompD() {
	if ls "$INPUT_DIR"/*.apk > /dev/null 2>&1 || ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
		DecompiledDir
		cd "$INPUT_DIR"
		echo -e "${GREEN}Make selection to decompile.${NC}"
		PROMPT="
Enter selection:"
		if ! ls "$INPUT_DIR"/*.apk > /dev/null 2>&1; then
			OPTIONS=( *.jar )
		elif ! ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
			OPTIONS=( *.apk )
		else
			OPTIONS=( *.apk *.jar )
		fi
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				"$APKTOOL" d -f -s $OPT -p "$FRAMEWORKS_DIR" -o "$DECOMPILED_DIR"/${OPT%.*}
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid apk or jar files in the input folder.${NC}"
	fi
}

# ===== Decompile tagged apk
DecompTag() {
	if ls "$INPUT_DIR"/*.apk > /dev/null 2>&1 || ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
		DecompiledDir
		cd "$INPUT_DIR"
		echo -e "${GREEN}Make selection to decompile.${NC}"
		PROMPT="
Enter selection:"
		if ! ls "$INPUT_DIR"/*.apk > /dev/null 2>&1; then
			OPTIONS=( *.jar )
		elif ! ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
			OPTIONS=( *.apk )
		else
			OPTIONS=( *.apk *.jar )
		fi
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				if [[ -f "$TAG_LIST" && -s "$TAG_LIST" ]]; then
					echo -e "${GREEN}Choose a tag from the list.${NC}"
					echo ""
					PS3="
Enter selection: "
					readarray -t options < "$TAG_LIST"
					select TAG in "${options[@]}" "$QUIT"; do
						if (( REPLY == 1 + ${#options[@]} )); then
							clear
							echo -e "${HRED}Aborted!${NC}"
							break
						elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
							clear
							"$APKTOOL" d -f $OPT -t $TAG -p "$FRAMEWORKS_DIR" -o "$DECOMPILED_DIR"/${OPT%.*}
							break
						fi
					done
				else
					echo -e "${HRED}You do not have any installed tagged framework files.${NC}"
				fi
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid apk or jar files in the input folder.${NC}"
	fi
}

# ===== Decompile tagged apk without dex(smali)
DecompTagD() {
	if ls "$INPUT_DIR"/*.apk > /dev/null 2>&1 || ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
		DecompiledDir
		cd "$INPUT_DIR"
		echo -e "${GREEN}Make selection to decompile.${NC}"
		PROMPT="
Enter selection:"
		if ! ls "$INPUT_DIR"/*.apk > /dev/null 2>&1; then
			OPTIONS=( *.jar )
		elif ! ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
			OPTIONS=( *.apk )
		else
			OPTIONS=( *.apk *.jar )
		fi
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				if [[ -f "$TAG_LIST" && -s "$TAG_LIST" ]]; then
					echo -e "${GREEN}Choose a tag from the list.${NC}"
					echo ""
					PS3="
Enter selection: "
					readarray -t options < "$TAG_LIST"
					select TAG in "${options[@]}" "$QUIT"; do
						if (( REPLY == 1 + ${#options[@]} )); then
							clear
							echo -e "${HRED}Aborted!${NC}"
							break
						elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
							clear
							"$APKTOOL" d -f -s $OPT -t $TAG -p "$FRAMEWORKS_DIR" -o "$DECOMPILED_DIR"/${OPT%.*}
							break
						fi
					done
				else
					echo -e "${HRED}You do not have any installed tagged framework files.${NC}"
				fi
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid apk or jar files in the input folder.${NC}"
	fi
}

# ===== Build apk
Compile() {
	if ls -d "$DECOMPILED_DIR"/* > /dev/null 2>&1; then
		OutputDir
		cd "$DECOMPILED_DIR"
		echo -e "${GREEN}Make selection to compile.${NC}"
		PROMPT="
Enter selection:"
		OPTIONS=( $(ls -d "$DECOMPILED_DIR"/* | xargs -d '\n' -n 1 basename) )
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				"$APKTOOL" b --use-aapt2 -f "$OPT" -p "$FRAMEWORKS_DIR"
				if [ -f "$OPT"/dist/*.apk ] || [ -f "$OPT"/dist/*.jar ]; then
					FILE=$(find "$OPT"/dist -type f -name "*.*")
					if [ ! -z "$FILE" ]; then
						WorkDir
						files=
						for files in $FILE ; do
							"$ZIPALIGN" -c 4 "$files"
							ZIPCHECK=$?
							if [ "$ZIPCHECK" = "1" ]; then
								"$ZIPALIGN" -f 4 "$files" "$WORK_DIR"/$(basename "$files")
								if [ -f "$WORK_DIR"/$(basename "$files") ]; then
									mv -f "$WORK_DIR"/$(basename "$files") "$OUTPUT_DIR"/
									rm -f "$files"
									echo ""
									echo Zipaligned $(basename "$files")
								else
									echo -e "${HRED}Zipalign Failed!${NC}"
								fi
							else
								mv -f "$files" "$OUTPUT_DIR"/
								echo ""
								echo Zipaligned $(basename "$files")
							fi
						done
					fi
				else
					echo ""
					echo -e "${HRED}Failed to compile apk or jar file.${NC}"
				fi
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There is no valid decompiled apk or jar file in the decompiled folder.${NC}"
	fi
}

# ===== Build signed apk
CompileSign() {
	if ls -d "$DECOMPILED_DIR"/* > /dev/null 2>&1; then
		OutputDir
		cd "$DECOMPILED_DIR"
		echo -e "${GREEN}This option uses the original ${HRED}META-INF${NC} ${GREEN}and${NC} ${HRED}AndroidManifest.xml${NC}"
		echo -e "${GREEN}for proper signing. If you made changes to the AndroidManifest.xml"
		echo "those changes will be lost. Use option 5 instead from the main menu"
		echo "to keep those changes."
		echo ""
		echo -e "Make selection to compile:${NC}"
		PROMPT="
Enter selection:"
		OPTIONS=( $(ls -d "$DECOMPILED_DIR"/* | xargs -d '\n' -n 1 basename) )
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				"$APKTOOL" b --use-aapt2 -f "$OPT" -p "$FRAMEWORKS_DIR"
				if [ -d $OPT/dist ]; then
					if [ -f $OPT/dist/*.apk ]; then
						LS_APK=$("$TOOL_7ZA" l "$INPUT_DIR"/$(basename $OPT).apk)
						if [[ "$LS_APK" == *"AndroidManifest.xml"* ]]; then
							"$TOOL_7ZA" x -aoa "$INPUT_DIR"/$(basename $OPT).apk AndroidManifest.xml
							"$TOOL_7ZA" a -tzip $OPT/dist/$(basename $OPT).apk "$DECOMPILED_DIR"/AndroidManifest.xml
							rm -f "$DECOMPILED_DIR"/AndroidManifest.xml
						fi
						if [[ "$LS_APK" == *"META-INF"* ]]; then
							"$TOOL_7ZA" x -aoa "$INPUT_DIR"/$(basename $OPT).apk META-INF/*
							"$TOOL_7ZA" a -tzip $OPT/dist/$(basename $OPT).apk "$DECOMPILED_DIR"/META-INF
							rm -rf "$DECOMPILED_DIR"/META-INF
						fi
					elif [ -f $OPT/dist/*.jar ]; then
						LS_JAR=$("$TOOL_7ZA" l "$INPUT_DIR"/$(basename $OPT).jar)
						if [[ "$LS_JAR" == *"AndroidManifest.xml"* ]]; then
							"$TOOL_7ZA" x -aoa "$INPUT_DIR"/$(basename $OPT).jar AndroidManifest.xml
							"$TOOL_7ZA" a -tzip $OPT/dist/$(basename $OPT).jar "$DECOMPILED_DIR"/AndroidManifest.xml
							rm -f "$DECOMPILED_DIR"/AndroidManifest.xml
						fi
						if [[ "$LS_JAR" == *"META-INF"* ]]; then
							"$TOOL_7ZA" x -aoa "$INPUT_DIR"/$(basename $OPT).jar META-INF/*
							"$TOOL_7ZA" a -tzip $OPT/dist/$(basename $OPT).jar "$DECOMPILED_DIR"/META-INF
							rm -rf "$DECOMPILED_DIR"/META-INF
						fi
					fi
				fi
				if [ -f "$OPT"/dist/*.apk ] || [ -f "$OPT"/dist/*.jar ]; then
					FILE=$(find "$OPT"/dist -type f -name "*.*")
					if [ ! -z "$FILE" ]; then
						WorkDir
						files=
						for files in $FILE ; do
							"$ZIPALIGN" -c 4 "$files"
							ZIPCHECK=$?
							if [ "$ZIPCHECK" = "1" ]; then
								"$ZIPALIGN" -f 4 "$files" "$WORK_DIR"/$(basename "$files")
								if [ -f "$WORK_DIR"/$(basename "$files") ]; then
									mv -f "$WORK_DIR"/$(basename "$files") "$OUTPUT_DIR"/
									rm -f "$files"
									echo ""
									echo Zipaligned $(basename "$files")
								else
									echo -e "${HRED}Zipalign Failed!${NC}"
								fi
							else
								mv -f "$files" "$OUTPUT_DIR"/
								echo ""
								echo Zipaligned $(basename "$files")
							fi
						done
					fi
				else
					echo ""
					echo -e "${HRED}Failed to compile apk or jar file.${NC}"
				fi
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There is no valid decompiled apk or jar file in the decompiled folder.${NC}"
	fi
}

# ===== Install framework
FrameInst() {
	if ls "$INPUT_DIR"/*.apk > /dev/null 2>&1; then
		FrameWorkDir
		cd "$INPUT_DIR"
		echo -e "${GREEN}Choose a framework apk.${NC}"
		PROMPT="
Enter selection:"
		OPTIONS=( *.apk )
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				"$APKTOOL" if $OPT -p "$FRAMEWORKS_DIR"
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid framework apk file in the input folder.${NC}"
	fi
}

# ===== Install tagged framework
FrameInstTag() {
	if ls "$INPUT_DIR"/*.apk > /dev/null 2>&1; then
		FrameWorkDir
		cd "$INPUT_DIR"
		echo -e "${GREEN}Choose a framework apk.${NC}"
		PROMPT="
Enter selection:"
		OPTIONS=( *.apk )
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${GREEN}Adding tags(labels) to your framework files allows"
				echo "you to work with multiple devices without confusion."
				echo "Enter a tag with no spaces or special characters."
				echo "If your device has multiple framework files, repeat this"
				echo -e "step using the same tag. Example tag: ${HRED}SamsungS22${NC}"
				echo ""
				read -e -p "Enter a framework tag: " TAG
				echo ""
				if [[ ! -z "$TAG" ]]; then
					if ! grep -w "$TAG" "$TAG_LIST" > /dev/null 2>&1; then
						echo $TAG >> "$TAG_LIST"
					fi
					"$APKTOOL" if $OPT -t $TAG -p "$FRAMEWORKS_DIR"
				else
					echo -e "${HRED}Aborted!${NC}"
				fi
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid framework apk files in the input folder.${NC}"
	fi
}

# =====  Zipalign APKs
ZipFile() {
	if ls "$ZIPALIGN_DIR"/*.apk > /dev/null 2>&1; then
		WorkDir
		cd "$ZIPALIGN_DIR"
		echo -e "${GREEN}Choose one or all files for zipaligning.${NC}"
		PROMPT="
Enter selection:"
		if ! ls "$ZIPALIGN_DIR"/*.apk > /dev/null 2>&1; then
			OPTIONS=( *.jar )
		elif ! ls "$ZIPALIGN_DIR"/*.jar > /dev/null 2>&1; then
			OPTIONS=( *.apk )
		else
			OPTIONS=( *.apk *.jar )
		fi
		QUIT=$(echo -e "${HRED}Quit${NC}")
		ZIPALL=$(echo -e "${GREEN}Zipalign all${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$ZIPALL" "$QUIT" ; do
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				APK=$(find -type f \( -name "*.apk" -or -name "*.jar" \))
				apk1=
				for apk1 in $APK ; do
					"$ZIPALIGN" -c 4 $apk1
					ZIPCHECK=$?
					if [ $ZIPCHECK -eq 1 ]; then
						echo ZipAligned $(basename $apk1)
						"$ZIPALIGN" -f 4 $apk1 "$WORK_DIR"/$(basename $apk1)
						if [ -e "$WORK_DIR"/$(basename $apk1) ]; then
							mv -f "$WORK_DIR"/$(basename $apk1) $apk1
						else
							echo ZipAligning $(basename $apk1) Failed
						fi
					else
						echo ZipAlign was already completed on $(basename $apk1)
					fi
				done
				break
			elif (( REPLY == 2 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				"$ZIPALIGN" -c 4 $OPT
				ZIPCHECK=$?
				if [ $ZIPCHECK -eq 1 ]; then
					echo ZipAligned $(basename $OPT)
					"$ZIPALIGN" -f 4 $OPT "$WORK_DIR"/$(basename $OPT)
					if [ -e "$WORK_DIR"/$(basename $OPT) ]; then
						mv -f "$WORK_DIR"/$(basename $OPT) $OPT
					else
						echo ZipAligning $(basename $OPT) Failed
					fi
				else
					echo ZipAlign was already completed on $(basename $OPT)
				fi
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid apk files in the zipalign folder.${NC}"
	fi
}

# ===== manage tags
MANAGE_TAGS() {
	if [[ -f "$TAG_LIST" && -s "$TAG_LIST" ]]; then
		echo -e "${GREEN}Choose one or all tags to remove.${NC}"
		echo ""
		QUIT=$(echo -e "${HRED}Quit${NC}")
		RMOVEALL=$(echo -e "${GREEN}Remove all${NC}")
		PS3="
Enter selection: "
		readarray -t options < "$TAG_LIST"
		select opt in "${options[@]}" "$RMOVEALL" "$QUIT"; do
			if (( REPLY == 1 + ${#options[@]} )); then
				if [[ -f "$TAG_LIST" ]]; then
					rm -f "$TAG_LIST"
					rm -f "$FRAMEWORKS_DIR"/*-*.apk
				fi
				clear
				echo -e "${GREEN}Done!${NC}"
				break
			elif (( REPLY == 2 + ${#options[@]} )); then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
				if grep -w "$opt" "$TAG_LIST" > /dev/null 2>&1; then
					sed -i "s/\<$opt\>//g" "$TAG_LIST"
					sed -i "/^$/d" "$TAG_LIST"
					rm -f "$FRAMEWORKS_DIR"/*-$opt.apk
				fi
				clear
				echo -e "${GREEN}Done!${NC}"
				break
			fi
		done
	else
		echo -e "${RED}You do not have any installed tagged frameworks.${NC}"
	fi
}

# ===== Change original signature of apk/s
SignK() {
	if ls "$INPUT_DIR"/*.apk > /dev/null 2>&1 || ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
		cd "$INPUT_DIR"
		echo -e "${GREEN}Make selection to sign or change to a generic signature."
		echo "This will add or change the signature of the original file"
		echo -e "in the input folder to a generic signature.${NC}"
		PROMPT="
Enter selection:"
		if ! ls "$INPUT_DIR"/*.apk > /dev/null 2>&1; then
			OPTIONS=( *.jar )
		elif ! ls "$INPUT_DIR"/*.jar > /dev/null 2>&1; then
			OPTIONS=( *.apk )
		else
			OPTIONS=( *.apk *.jar )
		fi
		QUIT=$(echo -e "${HRED}Quit${NC}")
		PS3="$PROMPT "
		echo ""
		select OPT in "${OPTIONS[@]}" "$QUIT" ; do 
			if (( REPLY == 1 + ${#OPTIONS[@]} )) ; then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			elif (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )) ; then
				clear
				java -jar "$SIGN_JAR" $OPT
				mv -f ${OPT%.*}.s.* "$OUTPUT_DIR"/$OPT
				echo -e "${GREEN}Done!${NC}"
				break
			else
				echo -e "${HRED}Invalid selection. Try again.${NC}"
			fi
		done
		cd "$BASE"
	else
		echo -e "${HRED}There are no valid apk or jar files in the input folder.${NC}"
	fi
}

# ===== check for update
VISIT_ITG() {
	echo ""
	echo -e "${GREEN}Visit website?${NC}"
	read -e -p "(Y/n) $ " VISIT
	if [[ -z $VISIT || $VISIT =~ ^([yY]|[yY][eE][sS]) ]]; then
		if command -v xdg-open > /dev/null; then
			xdg-open "$UPDATE_URL" > /dev/null 2>&1
		elif command -v gnome-open > /dev/null; then
			gnome-open "$UPDATE_URL" > /dev/null 2>&1
		fi
	fi
	clear
}
CHECK_FOR_UPDATE() {
	echo -e "${GREEN}Please wait...${NC}"
	echo ""
	SITE_VERSION=$(wget -q "$REPO_URL" -O - | grep -m 1 -o -P '.{0,0}APK Utility v.{0,3}')
	clear
	if [ "$VERSION" = "$SITE_VERSION" ]; then
		echo -e "${GREEN}$VERSION"
		echo "No update available. Check again later."
		echo ""
		echo -e "For more info visit:${NC}"
		echo -e "${CYAN}$UPDATE_URL${NC}"
		VISIT_ITG
	else
		echo -e "${GREEN}Update available!"
		echo ""
		echo -e "To download the latest version go to:${NC}"
		echo -e "${CYAN}$UPDATE_URL${NC}"
		VISIT_ITG
	fi
}

# ===== create desktop shortcut
DESKTOP_SHORTCUT() {
	echo "[Desktop Entry]" > "$DESKTOP_SHORTCUT"
	echo "Type=Application" >> "$DESKTOP_SHORTCUT"
	echo "Name=$PROJECT_NAME" >> "$DESKTOP_SHORTCUT"
	echo "Comment=$DESCRIPTION" >> "$DESKTOP_SHORTCUT"
	echo "Exec=\"$THIS_SCRIPT\"" >> "$DESKTOP_SHORTCUT"
	echo "Icon=$ICON" >> "$DESKTOP_SHORTCUT"
	echo "Categories=Development;" >> "$DESKTOP_SHORTCUT"
	echo "Terminal=true" >> "$DESKTOP_SHORTCUT"

	if [ -f "$DESKTOP_SHORTCUT" ]; then
		echo -e "${GREEN}Desktop entry added for ${CYAN}${BOLD}$(whoami)${NC}"
		echo -e "${GREEN}Check your apps menu for the shortcut.${NC}"
	else
		echo -e "${HRED}oops! Shortcut failed. Please try again.${NC}"
	fi
}

# ===== Menu
SELECTION=
until [ "$SELECTION" = "0" ]; do
	  clear
	  echo -e "${BLUEBG}${EXPND}${WHITE}${BOLD}$NAME_TXT${NC}"
    echo ""
    echo "	1   -  Install Framework"
    echo "	2   -  Install Framework + Tag"
    echo "	3   -  Decompile"
    echo "	4   -  Decompile without dex files"
    echo "	5   -  Decompile + Tag"
    echo "	6   -  Decompile + Tag without dex files"
    echo "	7   -  Compile"
    echo "	8   -  Compile + Sign with original signature"
    echo "	9   -  Zipalign"
    echo "	10  -  Sign apk or jar with generic signature"
    echo "	11  -  Manage Tags"
	  echo "	12  -  Check For Update"
	  echo "	13  -  Add Desktop Shortcut"
    echo "	0   -  Exit"
    echo ""
    echo -n "	Enter selection: "
    read SELECTION
    echo ""
    case $SELECTION in
				1 ) clear ; FrameInst ; PRESS_ENTER ;;
		    2 ) clear ; FrameInstTag ; PRESS_ENTER ;;
        3 ) clear ; Decomp ; PRESS_ENTER ;;
        4 ) clear ; DecompD ; PRESS_ENTER ;;
        5 ) clear ; DecompTag ; PRESS_ENTER ;;
        6 ) clear ; DecompTagD ; PRESS_ENTER ;;
		    7 ) clear ; Compile ; PRESS_ENTER ;;
		    8 ) clear ; CompileSign ; PRESS_ENTER ;;
		    9 ) clear ; WorkDir ; ZipFile ; PRESS_ENTER ;;
        10 ) clear ; SignK ; PRESS_ENTER ;;
        11 ) clear ; MANAGE_TAGS ; PRESS_ENTER ;;
	      12 ) clear ; CHECK_FOR_UPDATE ; PRESS_ENTER ;;
	      13 ) clear ; DESKTOP_SHORTCUT ; PRESS_ENTER ;;
        0 ) clear ; exit ;;
	      * ) clear ; INCORRECT_SELECTION ; PRESS_ENTER ;;
    esac
done
